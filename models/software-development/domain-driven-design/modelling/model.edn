;;;;
;;;; Domain Driven Design: Putting the Model to Work
;;;;
#{;

  ;;;
  ;;; Concepts
  ;;;

  ;; Nodes
  {:el :concept
   :id :software-development.domain-driven-design.modelling/c-bounded-context
   :tags #{"definition" "pattern"}
   :name "Bounded Context"
   :desc
   "A descrition of a boundary (typically a subsystem or the work of
a particular team) within which a particular model is defined and applicable."
   :doc "Multiple models are in play on any large project. They emerge for many reasons.
Two subsystems commonly serve very different user communities, with different
jobs, where different models may be useful. Teams working independently may
solve the same problem in different ways through lack of communication. The
tool set may also be different, meaning that program code cannot be shared.

Multiple models are inevitable, yet when code based on distinct models is
combined, software becomes buggy, unreliable, and difficult to understand.
Communication among team members becomes confused. It is often unclear in what
context a model should not be applied. Model expressions, like any other
phrase, only have meaning in context.

Therefore,

Explicitly define the context within which a model applies. Explicitly set
boundaries in terms of team organization, usage within specific parts of the
application, and physical manifestations such as code bases and database
schemas. Apply Continuous Integration to keep model concepts and terms
strictly consistent within these bounds, but don't be distracted or confused by
issues outside. Standardize a single development process within the context,
which need not be used elsewhere."}

  {:el :concept
   :id :software-development.domain-driven-design.modelling/c-continuous-integration
   :tags #{"pattern"}
   :name "Continuous Integration"
   :desc "A process of merging all code and other implementation artifacts
frequently, with automated tests to flag fragmentation quickly."
   :doc "Once a bounded context has been defined, we must keep it sound. When a number
of people are working in the same bounded context, there is a strong tendency
for the model to fragment.
The bigger the team, the bigger the problem, but as few as three or four people
can encounter serious problems. Yet breaking down the system into ever-smaller
contexts eventually loses a valuable level of integration and coherency.

Therefore,

Institute a process of merging all code and other implementation artifacts
frequently, with automated tests to flag fragmentation quickly.
Relentlessly exercise the ubiquitous language to hammer out a shared view of
the model as the concepts evolve in different people's heads."}

  {:el :concept
   :id :software-development.domain-driven-design.modelling/c-hands-on-modellers
   :tags #{"pattern"}
   :name "Hands On Modellers"
   :desc "Developers must be involved with the model and have contact with domain experts."
   :doc "If the people who write the code do not feel responsible for the model, or
don't understand how to make the model work for an application, then the model
has nothing to do with the software. If developers don't realize that changing
code changes the model, then their refactoring will weaken the model rather
than strengthen it. Meanwhile, when a modeler is separated from the
implementation process, he or she never acquires, or quickly loses, a feel for
the constraints of implementation.
The basic constraint of MODEL-DRIVEN DESIGN —that the model supports an
effective implementation and abstracts key insights into the domain—
is half-gone, and the resulting models will be impractical. Finally, the
knowledge and skills of experienced designers won't be transferred to other
developers if the division of labor prevents the kind of collaboration that
conveys the subtleties of coding a MODEL-DRIVEN DESIGN.

Therefore,

Any technical person contributing to the model must spend some time touching
the code, whatever primary role he or she plays on the project. Anyone
responsible for changing code must learn to express a model through the code.
Every developer must be involved in some level of discussion about the model
and have contact with domain experts. Those who contribute in different ways
must consciously engage those who touch the code in a dynamic exchange of model
ideas through the UBIQUITOUS LANGUAGE."}

  {:el :concept
   :id :software-development.domain-driven-design.modelling/c-model-driven-design
   :tags #{"pattern"}
   :name "Model Driven Design"
   :desc ""
   :doc "Tightly relating the code to an underlying model gives the code meaning and
makes the model relevant.

If the design, or some central part of it, does not map to the domain model,
that model is of little value, and the correctness of the software is suspect.
At the same time, complex mappings between models and design functions are
difficult to understand and, in practice, impossible to maintain as the design
changes. A deadly divide opens between analysis and design so that insight
gained in each of those activities does not feed into the other.

Therefore,

Design a portion of the software system to reflect the domain model in a very
literal way, so that mapping is obvious. Revisit the model and modify it to be
implemented more naturally in software, even as you seek to make it reflect
deeper insight into the domain. Demand a single model that serves both purposes
well, in addition to supporting a fluent UBIQUITOUS LANGUAGE. 
Draw from the model the terminology used in the design and the basic assignment
of responsibilities. The code becomes an expression of the model, so a change
to the code may be a change to the model. Its effect must ripple through the
rest of the project's activities accordingly.
To tie the implementation slavishly to a model usually requires software
development tools and languages that support a modeling paradigm, such as
object-oriented programming."}

  {:el :concept
   :id :software-development.domain-driven-design.modelling/c-ubiquitous-language
   :tags #{"definition" "pattern"}
   :name "Ubiquitous Language"
   :desc
   "A language around the domain model used by all team members within a
bounded context to connect all the activities of the team with the software."
   :doc "To create a supple, knowledge-rich design calls for a versatile, shared team
language, and a lively experimentation with language that seldom happens on
software projects.

A project faces serious problems when its language is fractured. Domain experts
use their jargon while technical team members have their own language tuned for
discussing the domain in terms of design. The terminology of day-to-day
discussions is disconnected from the terminology embedded in the code
(ultimately the most important product of a software project). And even the
same person uses different language in speech and in writing, so that the most
incisive expressions of the domain often emerge in a transient form that is
never captured in the code or even in writing.

Translation blunts communication and makes knowledge crunching anemic. Yet none
of these dialects can be a common language because none serves all needs.

Domain experts should object to terms or structures that are awkward or
inadequate to convey domain understanding; developers should watch for
ambiguity or inconsistency that will trip up design.

Play with the model as you talk about the system. Describe scenarios out loud
using the elements and interactions of the model, combining concepts in ways
allowed by the model. Find easier ways to say what you need to say, and then
take those new ideas back down to the diagrams and code.

With a ubiquitous language, the model is not just a design artifact. It becomes
integral to everything the developers and domain experts do together.

Therefore,

Use the model as the backbone of a language. Commit the team to exercising that
language relentlessly in all communication within the team and in the code.
Use the same language in diagrams, writing, and especially speech.

Iron out difficulties by experimenting with alternative expressions, which
reflect alternative models. Then refactor the code, renaming classes, methods,
and modules to conform to the new model. Resolve confusion over terms in
conversation, in just the way we come to agree on the meaning of ordinary
words.

Recognize that a change in the language is a change to the model."}

  ;; Relationships
  {:el :rel
   :id :software-development.domain-driven-design.modelling/c-bounded-context-names-enter-c-ubiquitous-language
   :from :software-development.domain-driven-design.modelling/c-bounded-context
   :to :software-development.domain-driven-design.modelling/c-ubiquitous-language
   :name "names enter"
   :desc ""}
  {:el :rel
   :id :software-development.domain-driven-design.modelling/c-bounded-context-overview-with-c-context-map
   :from :software-development.domain-driven-design.modelling/c-bounded-context
   :to :software-development.domain-driven-design.context-mapping/c-context-map
   :name "assess/overview relationships with"
   :desc ""}
  {:el :rel
   :id :software-development.domain-driven-design.modelling/c-bounded-context-with-c-continuous-integration
   :from :software-development.domain-driven-design.modelling/c-bounded-context
   :to :software-development.domain-driven-design.modelling/c-continuous-integration
   :name "keep model unified with"
   :desc ""}
  {:el :rel
   :id :software-development.domain-driven-design.modelling/c-model-driven-design-structures-c-ubiquitous-language
   :from :software-development.domain-driven-design.modelling/c-model-driven-design
   :to :software-development.domain-driven-design.modelling/c-ubiquitous-language
   :name "model gives structure to"
   :desc ""}
  {:el :rel
   :id :software-development.domain-driven-design.modelling/c-model-driven-design-within-c-bounded-context
   :from :software-development.domain-driven-design.modelling/c-model-driven-design
   :to :software-development.domain-driven-design.modelling/c-bounded-context
   :name "define model within"
   :desc ""}
  {:el :rel
   :id :software-development.domain-driven-design.modelling/c-model-driven-design-express-with-c-services
   :from :software-development.domain-driven-design.modelling/c-model-driven-design
   :to :software-development.domain-driven-design.building-blocks/c-services
   :name "express model with"
   :desc ""}
  {:el :rel
   :id :software-development.domain-driven-design.modelling/c-model-driven-design-express-with-c-domain-events
   :from :software-development.domain-driven-design.modelling/c-model-driven-design
   :to :software-development.domain-driven-design.building-blocks/c-domain-events
   :name "express change with"
   :desc ""}
  {:el :rel
   :id :software-development.domain-driven-design.modelling/c-model-driven-design-express-with-c-entities
   :from :software-development.domain-driven-design.modelling/c-model-driven-design
   :to :software-development.domain-driven-design.building-blocks/c-entities
   :name "express identity with"
   :desc ""}
  {:el :rel
   :id :software-development.domain-driven-design.modelling/c-model-driven-design-express-with-c-value-objects
   :from :software-development.domain-driven-design.modelling/c-model-driven-design
   :to :software-development.domain-driven-design.building-blocks/c-value-objects
   :name "express state and computation with"
   :desc ""}
  {:el :rel
   :id :software-development.domain-driven-design.modelling/c-model-driven-design-isolate-with-c-clean-architecture
   :from :software-development.domain-driven-design.modelling/c-model-driven-design
   :to :software-development.domain-driven-design/c-clean-architecture
   :name "isolate domain expressions with"
   :desc ""}
  {:el :rel
   :id :software-development.domain-driven-design.modelling/c-model-driven-design-reduce-cost-of-change-with-conceptual-contours
   :from :software-development.domain-driven-design.modelling/c-model-driven-design
   :to :software-development.domain-driven-design.supple-design/conceptual-contours
   :name "reduce cost of change with"
   :desc ""}
  {:el :rel
   :id :software-development.domain-driven-design.modelling/c-model-driven-design-simplify-interpretion-with-standalone-classes
   :from :software-development.domain-driven-design.modelling/c-model-driven-design
   :to :software-development.domain-driven-design.supple-design/standalone-classes
   :name "simplify interpretion with"
   :desc ""}
  {:el :rel
   :id :software-development.domain-driven-design.modelling/c-model-driven-design-express-model-through-intention-revealing-interfaces
   :from :software-development.domain-driven-design.modelling/c-model-driven-design
   :to :software-development.domain-driven-design.supple-design/intention-revealing-interfaces
   :name "express model through"
   :desc ""}

  {:el :rel
   :id :software-development.domain-driven-design.modelling/c-ubiquitous-language-model-out-loud-c-core-domain
   :from :software-development.domain-driven-design.modelling/c-ubiquitous-language
   :to :software-development.domain-driven-design.distillation/c-core-domain
   :name "model out loud"
   :desc ""}


  ;
  }