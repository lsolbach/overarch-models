;;;;
;;;; Modell for Domain Driven Design
;;;;
#{;

  ;;;
  ;;; Concept Model
  ;;;

  ;; Nodes
  {:el :concept
   :id :software-development.domain-driven-design/domain-driven-design
   :name "Domain Driven Design"
   :desc "An approach to the development of complex software
in which we focus on the core domain, explore models in a creative
collaboration of domain practitioners and software practitioners, and speak a
ubiquitous language within an explicitly bounded context."}
  ;;
  ;; Definitions
  ;;
  {:el :concept
   :id :software-development.domain-driven-design/upstream-downstream
   :name "upsteam-downstream"
   :desc "A relationship between two groups in which the “upstream” group’s actions
affect project success of the “downstream” group, but the actions of the
downstream do not significantly affect projects upstream."
   :doc "A relationship between two groups in which the “upstream” group’s actions
affect project success of the “downstream” group, but the actions of the
downstream do not significantly affect projects upstream (e.g. If two cities
are along the same river, the upstream city’s pollution primarily affects the
downstream city). The upstream team may succeed independently of the fate of
the downstream team."
   :tags #{"definition"}}

  {:el :concept
   :id :software-development.domain-driven-design/mutually-dependent
   :name "mutually dependent"
   :desc "A situation in which two software development projects in separate contexts
must both be delivered in order for either to be considered a success."
   :doc "A situation in which two software development projects in separate contexts
must both be delivered in order for either to be considered a success.
When two systems each rely on information or functionality of the other - something
we would generally try to avoid - naturally we see the projects that build them
as interdependent. Yet there are also mutually dependent projects where system
dependencies run only one direction. When the depended-on system has little
value without the dependent system and the integration with that system
- perhaps because this is the only place it is used -  then a failure to
deliver the dependent system would be a failure of both projects."
   :tags #{"definition"}}

  {:el :concept
   :id :software-development.domain-driven-design/free
   :name "free"
   :desc "A software development context in which the direction, success or failure of
development work in other contexts has little effect on delivery."
   :doc "A software development context in which the direction, success or failure of
development work in other contexts has little effect on delivery."
   :tags #{"definition"}}

  ;;
  ;; Parts as boundaries
  ;;
  {:el :concept
   :id :software-development.domain-driven-design/putting-the-model-to-work
   :name "Putting the Model to Work"
   :desc "Part I: Putting the Model to Work"
   :doc "Domain-Driven Design is an approach to the development of complex software in which we:

1. Focus on the core domain.
2. Explore models in a creative collaboration of domain practitioners and software practitioners.
3. Speak a ubiquitous language within an explicitly bounded context.

This three-point summary of DDD depends on the definition of the terms, which
are defined in this booklet.

Many projects do modeling work without getting much real benefit in the end.
The patterns of DDD distill successful practices from projects where dramatic
benefits have come from modeling. Taken together, they lay out a quite
different approach to modeling and software development that runs from fine
details to high-level vision. Rigorous modeling conventions must be balanced
with free exploration of models in collaboration with non-technical people.
Tactics and strategy must be combined to succeed, and DDD addresses both
tactical and strategic design."
   :tags #{"part"}}

  {:el :concept
   :id :software-development.domain-driven-design/building-blocks
   :name "Building Blocks"
   :desc "Part II: The Building Blocks of a Model-Driven Design"
   :doc "These patterns cast widely held best practices of object-oriented design in the
light of domain-driven design. They guide decisions to clarify the model and to
keep the model and implementation aligned with each other, each reinforcing the
other’s effectiveness. Careful crafting the details of individual model
elements gives developers a steady platform from which to explore models and to
keep them in close correspondence with the implementation."
   :tags #{"part"}}

  {:el :concept
   :id :software-development.domain-driven-design/supple-design
   :name "Supple Design"
   :desc "Part III: Supple Design"
   :doc "To have a project accelerate as development proceeds — rather than get weighed
down by its own legacy — demands a design that is a pleasure to work with,
inviting to change. A supple design.

Supple design is the complement to deep modeling.

Developers play two roles, each of which must be served by the design. The same
person might well play both roles — even switch back and forth in minutes — but
the relationship to the code is different nonetheless.
One role is the developer of a client, who weaves the domain objects into the
application code or other domain layer code, utilizing capabilities of the
design. A supple design reveals a deep underlying model that makes its potential clear.
The client developer can flexibly use a minimal set of loosely coupled concepts
to express a range of scenarios in the domain. Design elements fit together in
a natural way with a result that is predictable, clearly characterized, and
robust.

Equally important, the design must serve the developer working to
change it. To be open to change, a design must be easy to understand, revealing
that same underlying model that the client developer is drawing on. It must
follow the contours of a deep model of the domain, so most changes bend the
design at flexible points. The effects of its code must be transparently
obvious, so the consequences of a change will be easy to anticipate.
 * Making behavior obvious
 * Reducing the cost of change
 * Creating software developers to work with
"
   :tags #{"part"}}

  {:el :concept
   :id :software-development.domain-driven-design/context-mapping
   :name "Context Mapping"
   :desc "Part IV: Context Mapping for Strategic Design"
   :doc ""
   :tags #{"part"}}
  
  {:el :concept
   :id :software-development.domain-driven-design/distillation
   :name "Distillation"
   :desc "Part V: Distillation for Strategic Design"
   :doc ""
   :tags #{"part"}}

  {:el :concept
   :id :software-development.domain-driven-design/large-scale-structure
   :name "Large-scale Structure"
   :desc "Part VI: Large-scale Structure for Strategic Design"
   :doc ""
   :tags #{"part"}}

  {:el :concept
   :id :software-development.domain-driven-design/c-context
   :tags #{"definition"}
   :name "Context"
   :desc
   "The setting in which a word or statement appears that determines its meaning.
Statements about a model can only be understood in a context."
   :doc ""}

  {:el :concept
   :id :software-development.domain-driven-design/c-domain
   :tags #{"definition"}
   :name "Domain"
   :desc
   "A sphere of knowledge, influence or activity.
The subject area to which a user applies a program is the domain of the software."
   :doc ""}

  {:el :concept
   :id :software-development.domain-driven-design/c-clean-architecture
   :tags #{"pattern"}
   :name "Clean Architecture"
   :desc ""
   :doc ""}

  {:el :concept
   :id :software-development.domain-driven-design/c-layered-archtecture
   :tags #{"pattern"}
   :name "Layered Architecture"
   :desc "Isolates the expression of the domain model and the business logic, and
eliminates any dependency on infrastructure, user interface, or application logic
that is not business logic."
   :doc "In an object-oriented program, UI, database, and other support code often gets
written directly into the business objects. Additional business logic is
embedded in the behavior of UI widgets and database scripts. This happens
because it is the easiest way to make things work, in the short run.

When the domain-related code is diffused through such a large amount of other
code, it becomes extremely difficult to see and to reason about. Superficial
changes to the UI can actually change business logic. To change a business rule
may require meticulous tracing of UI code, database code, or other program
elements. Implementing coherent, model-driven objects becomes impractical.
Automated testing is awkward. With all the technologies and logic involved in
each activity, a program must be kept very simple or it becomes impossible to
understand.

Therefore,

Isolate the expression of the domain model and the business logic, and
eliminate any dependency on infrastructure, user interface, or even
application logic that is not business logic. Partition a complex program
into layers. Develop a design within each layer that is cohesive and that
depends only on the layers below. Follow standard architectural patterns to
provide loose coupling to the layers above. Concentrate all the code related
to the domain model in one layer and isolate it from the user interface,
application, and infrastructure code. The domain objects, free of the
responsibility of displaying themselves, storing themselves, managing
application tasks, and so forth, can be focused on expressing the domain model.
This allows a model to evolve to be rich enough and clear enough to capture
essential business knowledge and put it to work.

The key goal here is isolation. Related patterns, such as “Hexagonal
Architecture” may serve as well or better to the degree that they allow our
domain model expressions to avoid dependencies on and references to other
system concerns."}

  {:el :concept
   :id :software-development.domain-driven-design/c-model
   :tags #{"definition"}
   :name "Model"
   :desc
   "A system of abstractions that describes selected aspects of a domain
and can be used to solve problems related to that domain."
   :doc ""}

  ;;
  ;; Relations
  ;;

  ;
  }