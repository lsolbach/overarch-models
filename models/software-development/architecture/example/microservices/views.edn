;;;;
;;;; Views for the Microservices Blueprint Model
;;;;
#{;
  
  ;;;
  ;;; Architecture Views
  ;;;
  {:el :context-view
   :id :software-development.architecture.example.microservices/context-view
   :selection {:namespace-prefix "software-development.architecture.example.microservices"}
   :name "Microservices Example Context View"
   :title "Context view for the Microservices example"
   :desc "Shows the systems of the Microservices example and their relations"}

  {:el :container-view
   :id :software-development.architecture.example.microservices/container-view
   :selection {:namespace-prefix "software-development.architecture.example.microservices"}
   :name "Microservices Example Container View"
   :title "Container view for the Microservices example"
   :desc "Shows the containers of the Microservices example and their relations"}

  ;;
  ;; Simple Examples
  ;;
  {:el :container-view
   :id :software-development.architecture.example.microservices/microservice-container-view
   :include :related
   :plantuml {:skinparams {"nodesep" 50
                           "ranksep" 50}}
   :name "Microservice Container View"
   :title "Container View for an Example Microservice"
   :desc "Shows the containers of a simple Microservice"
   :ct [{:ref :software-development.architecture.example.microservices/order-service-uses-order-db :direction :down}
        {:ref :software-development.architecture.example.microservices/inventory-service-uses-inventory-db :direction :down}
        {:ref :software-development.architecture.example.microservices/payment-service-uses-payment-db :direction :down}
        {:ref :software-development.architecture.example.microservices/shipping-service-uses-shipping-db :direction :down}]}

  {:el :container-view
   :id :software-development.architecture.example.microservices/simple-restful-container-view
   :include :related
   :layout :left-right
          ;:linetype :orthogonal
   :plantuml {:skinparams {"nodesep" 50
                           "ranksep" 50}}
   :name "Simple RESTful Communication Microservices Container View"
   :title "Container View for the simple RESTful Communication Microservices Example"
   :desc "Shows the containers of the simple Microservices Example and their RESTful communication."
   :doc "With RESTful communication, the services communicateby calling each
         other's RESTful APIs in a request/response pattern.
         The upstream service blocks until the downstream service responds.
         So the services are tightly coupled and the communication is synchronous. 
         If a downstream service is slow, the upstream service has to wait for the
         downstream service and as a result, it also responds slowly.
         If the downstream service is down, the upstream service also fails.
         Also one service has to know the details of the other service's API
         and is responsible for the orchestration of the process."
   :ct [;{:ref :software-development.architecture.example.microservices/notification-service-calls-email-system}
        ;{:ref :software-development.architecture.example.microservices/shipping-service-calls-logistics-system}
        ;{:ref :software-development.architecture.example.microservices/payment-service-calls-payment-system}
        {:ref :software-development.architecture.example.microservices/customer-uses-shop-frontend}
        {:ref :software-development.architecture.example.microservices/shop-frontend-uses-order-service}
        {:ref :software-development.architecture.example.microservices/order-service-calls-inventory-service}
        {:ref :software-development.architecture.example.microservices/order-service-calls-payment-service}
        {:ref :software-development.architecture.example.microservices/order-service-calls-shipping-service}
        {:ref :software-development.architecture.example.microservices/order-service-calls-notification-service}]}

  {:el :container-view
   :id :software-development.architecture.example.microservices/simple-eventdriven-container-view
   :include :related
   :layout :left-right
          ;:linetype :orthogonal
   :plantuml {:skinparams {"nodesep" 50
                           "ranksep" 50}}
   :name "Simple Event Driven Communication Microservices Container View"
   :title "Container View for the simple Event Driven Communication Microservices Example"
   :desc "Shows the containers of the simple Microservices Example and their event driven communication."
   :doc "With 'Event Driven Architecture', the services communicate by publishing and subscribing to topics.
The communication is asynchronous and the services are temporarily decoupled.
The orchestration of the process is done by the connection of the services to the topics
and the event processing policies on each service.
         
This architecture is more resilient to changes and failures.
A service can be added or removed without affecting the other services.
Events are stored in the topic and will be processed when the service is up.

The process could be reconfigured by changing the connections to the topics and the policies.
This is also called a 'Pipes and Filters' architecture."
   :ct [;{:ref :software-development.architecture.example.microservices/notification-service-calls-email-system}
        ;{:ref :software-development.architecture.example.microservices/shipping-service-calls-logistics-system}
        ;{:ref :software-development.architecture.example.microservices/payment-service-calls-payment-system}
        {:ref :software-development.architecture.example.microservices/order-service-publishes-to-order-topic :direction :right}
        {:ref :software-development.architecture.example.microservices/notification-service-subscribes-to-order-topic :direction :left}
        {:ref :software-development.architecture.example.microservices/inventory-service-subscribes-to-order-topic}
        {:ref :software-development.architecture.example.microservices/inventory-service-publishes-to-inventory-topic :direction :right}
        {:ref :software-development.architecture.example.microservices/payment-service-subscribes-to-inventory-topic}
        {:ref :software-development.architecture.example.microservices/notification-service-subscribes-to-inventory-topic :direction :left}
        {:ref :software-development.architecture.example.microservices/payment-service-publishes-to-payment-topic :direction :right}
        {:ref :software-development.architecture.example.microservices/shipping-service-subscribes-to-payment-topic}
        {:ref :software-development.architecture.example.microservices/notification-service-subscribes-to-payment-topic :direction :left}
        {:ref :software-development.architecture.example.microservices/shipping-service-publishes-to-shipping-topic :direction :right}
        {:ref :software-development.architecture.example.microservices/notification-service-subscribes-to-shipping-topic :direction :right}
        ]}

  ;;;
  ;;; Advanced Examples
  ;;;
  {:el :container-view
   :id :software-development.architecture.example.microservices/rest-container-view
   :selection [{:el :request
                :namespace "software-development.architecture.example.microservices"}
               {:el :request
                :namespace "software-development.architecture.example.microservices.rest"}]
   :include :related
          ;:linetype :orthogonal
   :plantuml {:skinparams {"nodesep" 60
                           "ranksep" 60}}
   :name "REST Microservices Example Container View"
   :title "Container View for the REST Microservices Example"
   :desc "Shows the containers of the Microservices Example and their RESTful communication"}

  {:el :container-view
   :id :software-development.architecture.example.microservices/event-driven-container-view
   :selection [{:el :architecture-model-relation
                :namespace "software-development.architecture.example.microservices"}
               {:el :architecture-model-relation
                :namespace "software-development.architecture.example.microservices.event-driven"}]
   :include :related
   :layout :left-right
          ;:linetype :orthogonal
   :plantuml {:skinparams {"nodesep" 60
                           "ranksep" 60}}
   :name "Event Driven Microservices Example Container View"
   :title "Container View for the Event Driven Microservices Example"
   :desc "Shows the containers of the Microservices Example and their event driven communication"}

  ;
  }