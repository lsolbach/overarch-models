;;;;
;;;; Connascence Concepts
;;;;
#{{:el :concept
   :id :software-development.complexity.connascence/connascence
   :name "Connascence"
   :desc "A software quality metric that measures the degree of coupling between software modules"
   :doc "Connascence is a software quality metric that measures the degree of
coupling between software modules.
It is a measure of the strength of the relationships between modules.
Connascences have the properties degree, strength, and locality.
  
There are several types of connascence, including connascence of name,
connascence of meaning, connascence of type, connascence of position,
connascence of value, connascence of algorithm, connascence of execution,
connascence of identity, connascence of time, connascence of space, connascence
of implementation, connascence of interface, and connascence of protocol."
   :tags #{"generic" "metric" "design" "connascence"}}

  {:el :concept
   :name "Connascence Degree"
   :id :software-development.complexity.connascence/connascence-degree
   :desc "measures the degree of coupling between two software modules"
   :doc "Connascence Degree is a measure of the degree of coupling between two software modules. It is a measure of the degree of coupling between two software modules."
   :tags #{"generic" "metric" "design" "connascence"}}

  {:el :concept
   :name "Connascence Strength"
   :id :software-development.complexity.connascence/connascence-strength
   :desc "measures the strength of the relationship between two software modules"
   :doc "Connascence Strength is a measure of the strength of the relationship between two software modules. It is a measure of the strength of the relationship between two software modules."
   :tags #{"generic" "metric" "design" "connascence"}}

  {:el :concept
   :name "Connascence Locality"
   :id :software-development.complexity.connascence/connascence-locality
   :desc "measures the locality of connascence between two software modules"
   :doc "Connascence Locality is a measure of the locality of connascence between two software modules. It is a measure of the locality of connascence between two software modules."
   :tags #{"generic" "metric" "design" "connascence"}}

  {:el :concept
   :id :software-development.complexity.connascence/connascence-of-name
   :name "Connascence of Name"
   :desc "occurs when two or more modules must agree on the name of a variable, constant, or method"
   :doc "Connascence of Name is a type of connascence that occurs when two or more modules
must agree on the name of a variable, constant, or method.
  
Java Example:
```java
public class Math {
  public static double square(double x) {
    return x * x;
  }
}
  
public class Shape {
  public double area(double x) {
    return Math.square(x);
  }
}
```

In this example, the `Shape` class depends on the `Math` class, and the `Shape`
class must agree on the name of the `square` method in the `Math` class."
   :tags #{"generic" "concept" "design" "connascence"}}

  {:el :concept
   :id :software-development.complexity.connascence/connascence-of-meaning
   :name "Connascence of Meaning"
   :desc "occurs when two or more modules must agree on the meaning of a variable, constant, or method."
   :doc "Connascence of Meaning is a type of connascence that occurs when two or more modules
must agree on the meaning of a variable, constant, or method.

Java Example:
```java
public class Renderer {
  public static ByteArray render(int format , String data) {
    if (format == 1) {
      return new PDFRenderer().render(data);
    } else if (format == 2) {
      return new HTMLRenderer().render(data);
    } else {
      throw new IllegalArgumentException(\"Invalid format\");
    }
  }
}

public class Application {
  public static renderAsHTML(String data) {
    Renderer.render(2, data);
  }
}
```

In this example, the format integer is a magic number that represents the format of the data.
The `Renderer` class must agree on the meaning of the format integer with the `Application` class."
   :tags #{"generic" "concept" "design" "connascence"}}

  {:el :concept
   :id :software-development.complexity.connascence/connascence-of-type
   :name "Connascence of Type"
   :desc "occurs when two or more modules must agree on the type of a variable, constant, or method"
   :doc "Connascence of Type occurs when two or more modules must agree on the type of a variable, constant, or method.

Java Example:
```java
```
"
   :tags #{"generic" "concept" "design" "connascence"}}

  {:el :concept
   :id :software-development.complexity.connascence/connascence-of-position
   :name "Connascence of Position"
   :desc "occurs when two or more modules must agree on the position of a variable, constant, or method"
   :doc ""
   :tags #{"generic" "concept" "design" "connascence"}}

  {:el :concept
   :id :software-development.complexity.connascence/connascence-of-algorithm
   :name "Connascence of Algorithm"
   :desc "occurs when two or more modules must agree on the algorithm used to solve a problem"
   :doc ""
   :tags #{"generic" "concept" "design" "connascence"}}

  {:el :concept
   :id :software-development.complexity.connascence/connascence-of-execution
   :name "Connascence of Execution"
   :desc "occurs when two or more modules must agree on the order in which they are executed"
   :doc ""
   :tags #{"generic" "concept" "design" "connascence"}}

  {:el :concept
   :id :software-development.complexity.connascence/connascence-of-identity
   :name "Connascence of Identity"
   :desc "occurs when two or more modules must agree on the identity of an object"
   :doc ""
   :tags #{"generic" "concept" "design" "connascence"}}

  {:el :concept
   :id :software-development.complexity.connascence/connascence-of-value
   :name "Connascence of Value"
   :desc "occurs when two or more modules must agree on the value of a variable, constant, or method"
   :doc ""
   :tags #{"generic" "concept" "design" "connascence"}}

  {:el :concept
   :id :software-development.complexity.connascence/connascence-of-time
   :name "Connascence of Time"
   :desc "occurs when two or more modules must agree on the timing of an event"
   :doc ""
   :tags #{"generic" "concept" "design" "connascence"}}

  {:el :concept
   :id :software-development.complexity.connascence/connascence-of-space
   :name "Connascence of Space"
   :desc "occurs when two or more modules must agree on the location of an object."
   :doc ""
   :tags #{"generic" "concept" "design" "connascence"}}

  {:el :concept
   :id :software-development.complexity.connascence/connascence-of-implementation
   :name "Connascence of Implementation"
   :desc "occurs when two or more modules must agree on the implementation details of a feature."
   :doc ""
   :tags #{"generic" "concept" "design" "connascence"}}

  {:el :concept
   :id :software-development.complexity.connascence/connascence-of-interface
   :name "Connascence of Interface"
   :desc "occurs when two or more modules must agree on the interface of a component."
   :doc ""
   :tags #{"generic" "concept" "design" "connascence"}}

  {:el :concept
   :id :software-development.complexity.connascence/connascence-of-protocol
   :name "Connascence of Protocol"
   :desc "occurs when two or more modules must agree on the protocol used to communicate."
   :doc ""
   :tags #{"generic" "concept" "design" "connascence"}}

  ;; Relationships
  {:el :rel
   :id :software-development.complexity.connascence/connascence-measure-of-coupling
   :from :software-development.complexity.connascence/connascence
   :to :software-development.complexity/coupling
   :name "measure of"
   :desc "coupling between software modules"
   :doc "Connascence is a software quality metric that measures the degree of coupling between software modules. It is a measure of the strength of the relationships between modules."
   :tags #{"generic" "metric" "design" "connascence"}}
  {:el :rel
   :id :software-development.complexity.connascence/connascence-degree-measure-of--of-connascense
   :from :software-development.complexity.connascence/connascence-degree
   :to :software-development.complexity.connascence/connascence
   :name "is a measure of"
   :doc "Connascence Degree is a measure of the degree of coupling between two software modules."
   :tags #{"generic" "metric" "design" "connascence"}}
  {:el :rel
   :id :software-development.complexity.connascence/connascence-strength-measure-of-connascense
   :from :software-development.complexity.connascence/connascence-strength
   :to :software-development.complexity.connascence/connascence
   :name "is a measure of"
   :doc "Connascence Strength is a measure of the strength of the relationship between two software modules."
   :tags #{"generic" "metric" "design" "connascence"}}
  {:el :rel
   :id :software-development.complexity.connascence/connascence-locality-measure-of-connascense
   :from :software-development.complexity.connascence/connascence-locality
   :to :software-development.complexity.connascence/connascence
   :name "is a measure of"
   :desc "Connascence Locality is a measure of the locality of connascence between two software modules."
   :tags #{"generic" "metric" "design" "connascence"}}
  {:el :is-a
   :id :software-development.complexity.connascence/connascence-of-name-is-a-connascence
   :from :software-development.complexity.connascence/connascence-of-name
   :to :software-development.complexity.connascence/connascence
   :name "is a"
   :desc "type of connascence."
   :tags #{"generic" "concept" "design" "connascence"}
   :index 1}
  {:el :is-a
   :id :software-development.complexity.connascence/connascence-of-meaning-is-a-connascence
   :from :software-development.complexity.connascence/connascence-of-meaning
   :to :software-development.complexity.connascence/connascence
   :name "is a"
   :desc "type of connascence."
   :tags #{"generic" "concept" "design" "connascence"}}
  {:el :is-a
   :id :software-development.complexity.connascence/connascence-of-type-is-a-connascence
   :from :software-development.complexity.connascence/connascence-of-type
   :to :software-development.complexity.connascence/connascence
   :name "is a"
   :desc "type of connascence."
   :tags #{"generic" "concept" "design" "connascence"}}
  {:el :is-a
   :id :software-development.complexity.connascence/connascence-of-position-is-a-connascence
   :from :software-development.complexity.connascence/connascence-of-position
   :to :software-development.complexity.connascence/connascence
   :name "is a"
   :desc "type of connascence."
   :tags #{"generic" "concept" "design" "connascence"}}
  {:el :is-a
   :id :software-development.complexity.connascence/connascence-of-value-is-a-connascence
   :from :software-development.complexity.connascence/connascence-of-value
   :to :software-development.complexity.connascence/connascence
   :name "is a"
   :desc "type of connascence."
   :tags #{"generic" "concept" "design" "connascence"}}
  {:el :is-a
   :id :software-development.complexity.connascence/connascence-of-algorithm-is-a-connascence
   :from :software-development.complexity.connascence/connascence-of-algorithm
   :to :software-development.complexity.connascence/connascence
   :name "is a"
   :desc "type of connascence."
   :tags #{"generic" "concept" "design" "connascence"}}
  {:el :is-a
   :id :software-development.complexity.connascence/connascence-of-execution-is-a-connascence
   :from :software-development.complexity.connascence/connascence-of-execution
   :to :software-development.complexity.connascence/connascence
   :name "is a"
   :desc "type of connascence."
   :tags #{"generic" "concept" "design" "connascence"}}
  {:el :is-a
   :id :software-development.complexity.connascence/connascence-of-identity-is-a-connascence
   :from :software-development.complexity.connascence/connascence-of-identity
   :to :software-development.complexity.connascence/connascence
   :name "is a"
   :desc "type of connascence."
   :tags #{"generic" "concept" "design" "connascence"}}
  {:el :is-a
   :id :software-development.complexity.connascence/connascence-of-time-is-a-connascence
   :from :software-development.complexity.connascence/connascence-of-time
   :to :software-development.complexity.connascence/connascence
   :name "is a"
   :desc "type of connascence."
   :tags #{"generic" "concept" "design" "connascence"}}
  {:el :is-a
   :id :software-development.complexity.connascence/connascence-of-space-is-a-connascence
   :from :software-development.complexity.connascence/connascence-of-space
   :to :software-development.complexity.connascence/connascence
   :name "is a"
   :desc "type of connascence."
   :tags #{"generic" "concept" "design" "connascence"}}}